// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : sim.v
// Device     : SIM
// LiteX sha1 : 577674bf
// Date       : 2023-11-07 08:35:17
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module sim (
    input  wire    [7:0] serial_sink_data,
    output wire          serial_sink_ready,
    input  wire          serial_sink_valid,
    output wire    [7:0] serial_source_data,
    input  wire          serial_source_ready,
    output wire          serial_source_valid,
    output wire          sim_trace,
    input  wire          sys_clk
);


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire   [14:0] adr;
reg           adr_burst = 1'd0;
wire          bus_error;
reg    [31:0] bus_errors = 32'd0;
reg           bus_errors_re = 1'd0;
wire   [31:0] bus_errors_status;
wire          bus_errors_we;
reg    [19:0] count = 20'd1000000;
wire          cpu_rst;
wire    [5:0] csr_bankarray_adr;
wire   [31:0] csr_bankarray_csrbank0_bus_errors_r;
reg           csr_bankarray_csrbank0_bus_errors_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank0_bus_errors_w;
reg           csr_bankarray_csrbank0_bus_errors_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank0_reset0_r;
reg           csr_bankarray_csrbank0_reset0_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank0_reset0_w;
reg           csr_bankarray_csrbank0_reset0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank0_scratch0_r;
reg           csr_bankarray_csrbank0_scratch0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank0_scratch0_w;
reg           csr_bankarray_csrbank0_scratch0_we = 1'd0;
wire          csr_bankarray_csrbank0_sel;
wire          csr_bankarray_csrbank1_isNaR_r;
reg           csr_bankarray_csrbank1_isNaR_re = 1'd0;
wire          csr_bankarray_csrbank1_isNaR_w;
reg           csr_bankarray_csrbank1_isNaR_we = 1'd0;
wire          csr_bankarray_csrbank1_isZero_r;
reg           csr_bankarray_csrbank1_isZero_re = 1'd0;
wire          csr_bankarray_csrbank1_isZero_w;
reg           csr_bankarray_csrbank1_isZero_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank1_n10_r;
reg           csr_bankarray_csrbank1_n10_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank1_n10_w;
reg           csr_bankarray_csrbank1_n10_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank1_n20_r;
reg           csr_bankarray_csrbank1_n20_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank1_n20_w;
reg           csr_bankarray_csrbank1_n20_we = 1'd0;
wire          csr_bankarray_csrbank1_sel;
wire   [31:0] csr_bankarray_csrbank1_sub0_r;
reg           csr_bankarray_csrbank1_sub0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank1_sub0_w;
reg           csr_bankarray_csrbank1_sub0_we = 1'd0;
wire          csr_bankarray_csrbank2_sel;
wire    [7:0] csr_bankarray_csrbank3_marker0_r;
reg           csr_bankarray_csrbank3_marker0_re = 1'd0;
wire    [7:0] csr_bankarray_csrbank3_marker0_w;
reg           csr_bankarray_csrbank3_marker0_we = 1'd0;
wire          csr_bankarray_csrbank3_sel;
wire          csr_bankarray_csrbank4_enable0_r;
reg           csr_bankarray_csrbank4_enable0_re = 1'd0;
wire          csr_bankarray_csrbank4_enable0_w;
reg           csr_bankarray_csrbank4_enable0_we = 1'd0;
wire          csr_bankarray_csrbank4_sel;
wire          csr_bankarray_csrbank5_en0_r;
reg           csr_bankarray_csrbank5_en0_re = 1'd0;
wire          csr_bankarray_csrbank5_en0_w;
reg           csr_bankarray_csrbank5_en0_we = 1'd0;
wire          csr_bankarray_csrbank5_ev_enable0_r;
reg           csr_bankarray_csrbank5_ev_enable0_re = 1'd0;
wire          csr_bankarray_csrbank5_ev_enable0_w;
reg           csr_bankarray_csrbank5_ev_enable0_we = 1'd0;
wire          csr_bankarray_csrbank5_ev_pending_r;
reg           csr_bankarray_csrbank5_ev_pending_re = 1'd0;
wire          csr_bankarray_csrbank5_ev_pending_w;
reg           csr_bankarray_csrbank5_ev_pending_we = 1'd0;
wire          csr_bankarray_csrbank5_ev_status_r;
reg           csr_bankarray_csrbank5_ev_status_re = 1'd0;
wire          csr_bankarray_csrbank5_ev_status_w;
reg           csr_bankarray_csrbank5_ev_status_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank5_load0_r;
reg           csr_bankarray_csrbank5_load0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank5_load0_w;
reg           csr_bankarray_csrbank5_load0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank5_reload0_r;
reg           csr_bankarray_csrbank5_reload0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank5_reload0_w;
reg           csr_bankarray_csrbank5_reload0_we = 1'd0;
wire          csr_bankarray_csrbank5_sel;
wire          csr_bankarray_csrbank5_update_value0_r;
reg           csr_bankarray_csrbank5_update_value0_re = 1'd0;
wire          csr_bankarray_csrbank5_update_value0_w;
reg           csr_bankarray_csrbank5_update_value0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank5_value_r;
reg           csr_bankarray_csrbank5_value_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank5_value_w;
reg           csr_bankarray_csrbank5_value_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank6_ev_enable0_r;
reg           csr_bankarray_csrbank6_ev_enable0_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank6_ev_enable0_w;
reg           csr_bankarray_csrbank6_ev_enable0_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank6_ev_pending_r;
reg           csr_bankarray_csrbank6_ev_pending_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank6_ev_pending_w;
reg           csr_bankarray_csrbank6_ev_pending_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank6_ev_status_r;
reg           csr_bankarray_csrbank6_ev_status_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank6_ev_status_w;
reg           csr_bankarray_csrbank6_ev_status_we = 1'd0;
wire          csr_bankarray_csrbank6_rxempty_r;
reg           csr_bankarray_csrbank6_rxempty_re = 1'd0;
wire          csr_bankarray_csrbank6_rxempty_w;
reg           csr_bankarray_csrbank6_rxempty_we = 1'd0;
wire          csr_bankarray_csrbank6_rxfull_r;
reg           csr_bankarray_csrbank6_rxfull_re = 1'd0;
wire          csr_bankarray_csrbank6_rxfull_w;
reg           csr_bankarray_csrbank6_rxfull_we = 1'd0;
wire          csr_bankarray_csrbank6_sel;
wire          csr_bankarray_csrbank6_txempty_r;
reg           csr_bankarray_csrbank6_txempty_re = 1'd0;
wire          csr_bankarray_csrbank6_txempty_w;
reg           csr_bankarray_csrbank6_txempty_we = 1'd0;
wire          csr_bankarray_csrbank6_txfull_r;
reg           csr_bankarray_csrbank6_txfull_re = 1'd0;
wire          csr_bankarray_csrbank6_txfull_w;
reg           csr_bankarray_csrbank6_txfull_we = 1'd0;
wire    [7:0] csr_bankarray_dat_r;
wire   [13:0] csr_bankarray_interface0_bank_bus_adr;
reg    [31:0] csr_bankarray_interface0_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface0_bank_bus_dat_w;
wire          csr_bankarray_interface0_bank_bus_we;
wire   [13:0] csr_bankarray_interface1_bank_bus_adr;
reg    [31:0] csr_bankarray_interface1_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface1_bank_bus_dat_w;
wire          csr_bankarray_interface1_bank_bus_we;
wire   [13:0] csr_bankarray_interface2_bank_bus_adr;
reg    [31:0] csr_bankarray_interface2_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface2_bank_bus_dat_w;
wire          csr_bankarray_interface2_bank_bus_we;
wire   [13:0] csr_bankarray_interface3_bank_bus_adr;
reg    [31:0] csr_bankarray_interface3_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface3_bank_bus_dat_w;
wire          csr_bankarray_interface3_bank_bus_we;
wire   [13:0] csr_bankarray_interface4_bank_bus_adr;
reg    [31:0] csr_bankarray_interface4_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface4_bank_bus_dat_w;
wire          csr_bankarray_interface4_bank_bus_we;
wire   [13:0] csr_bankarray_interface5_bank_bus_adr;
reg    [31:0] csr_bankarray_interface5_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface5_bank_bus_dat_w;
wire          csr_bankarray_interface5_bank_bus_we;
wire   [13:0] csr_bankarray_interface6_bank_bus_adr;
reg    [31:0] csr_bankarray_interface6_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface6_bank_bus_dat_w;
wire          csr_bankarray_interface6_bank_bus_we;
wire          csr_bankarray_sel;
reg           csr_bankarray_sel_r = 1'd0;
wire   [13:0] csr_bankarray_sram_bus_adr;
reg    [31:0] csr_bankarray_sram_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_sram_bus_dat_w;
wire          csr_bankarray_sram_bus_we;
wire   [13:0] csr_interconnect_adr;
wire   [31:0] csr_interconnect_dat_r;
wire   [31:0] csr_interconnect_dat_w;
wire          csr_interconnect_we;
wire   [31:0] dat_r;
wire          dbus_dbus_ack;
wire   [29:0] dbus_dbus_adr;
wire    [1:0] dbus_dbus_bte;
wire    [2:0] dbus_dbus_cti;
wire          dbus_dbus_cyc;
wire   [31:0] dbus_dbus_dat_r;
wire   [31:0] dbus_dbus_dat_w;
wire          dbus_dbus_err;
wire    [3:0] dbus_dbus_sel;
wire          dbus_dbus_stb;
wire          dbus_dbus_we;
wire          done;
reg           error = 1'd0;
wire          finish_r;
reg           finish_re = 1'd0;
reg           finish_w = 1'd0;
reg           finish_we = 1'd0;
reg           grant = 1'd0;
wire          ibus_ibus_ack;
wire   [29:0] ibus_ibus_adr;
wire    [1:0] ibus_ibus_bte;
wire    [2:0] ibus_ibus_cti;
wire          ibus_ibus_cyc;
wire   [31:0] ibus_ibus_dat_r;
wire   [31:0] ibus_ibus_dat_w;
wire          ibus_ibus_err;
wire    [3:0] ibus_ibus_sel;
wire          ibus_ibus_stb;
wire          ibus_ibus_we;
reg           int_rst = 1'd1;
reg           interface0_ram_bus_ack = 1'd0;
wire   [29:0] interface0_ram_bus_adr;
wire    [1:0] interface0_ram_bus_bte;
wire    [2:0] interface0_ram_bus_cti;
wire          interface0_ram_bus_cyc;
wire   [31:0] interface0_ram_bus_dat_r;
wire   [31:0] interface0_ram_bus_dat_w;
reg           interface0_ram_bus_err = 1'd0;
wire    [3:0] interface0_ram_bus_sel;
wire          interface0_ram_bus_stb;
wire          interface0_ram_bus_we;
reg           interface1_ram_bus_ack = 1'd0;
wire   [29:0] interface1_ram_bus_adr;
wire    [1:0] interface1_ram_bus_bte;
wire    [2:0] interface1_ram_bus_cti;
wire          interface1_ram_bus_cyc;
wire   [31:0] interface1_ram_bus_dat_r;
wire   [31:0] interface1_ram_bus_dat_w;
reg           interface1_ram_bus_err = 1'd0;
wire    [3:0] interface1_ram_bus_sel;
wire          interface1_ram_bus_stb;
wire          interface1_ram_bus_we;
reg    [31:0] interrupt = 32'd0;
reg           isNaR_re = 1'd0;
wire          isNaR_status;
wire          isNaR_we;
reg           isZero_re = 1'd0;
wire          isZero_status;
wire          isZero_we;
reg     [4:0] master = 5'd0;
reg           n1_re = 1'd0;
reg    [31:0] n1_storage = 32'd0;
reg           n2_re = 1'd0;
reg    [31:0] n2_storage = 32'd0;
wire   [31:0] out;
wire          por_clk;
reg           ram_bus_ack = 1'd0;
wire   [29:0] ram_bus_adr;
wire    [1:0] ram_bus_bte;
wire    [2:0] ram_bus_cti;
wire          ram_bus_cyc;
wire   [31:0] ram_bus_dat_r;
wire   [31:0] ram_bus_dat_w;
reg           ram_bus_err = 1'd0;
wire    [3:0] ram_bus_sel;
wire          ram_bus_stb;
wire          ram_bus_we;
wire    [1:0] request;
wire          reset;
reg           reset_re = 1'd0;
reg     [1:0] reset_storage = 2'd0;
reg           scratch_re = 1'd0;
reg    [31:0] scratch_storage = 32'd305419896;
reg    [29:0] self0 = 30'd0;
reg    [31:0] self1 = 32'd0;
reg     [3:0] self2 = 4'd0;
reg           self3 = 1'd0;
reg           self4 = 1'd0;
reg           self5 = 1'd0;
reg     [2:0] self6 = 3'd0;
reg     [1:0] self7 = 2'd0;
reg           shared_ack = 1'd0;
wire   [29:0] shared_adr;
wire    [1:0] shared_bte;
wire    [2:0] shared_cti;
wire          shared_cyc;
reg    [31:0] shared_dat_r = 32'd0;
wire   [31:0] shared_dat_w;
wire          shared_err;
wire    [3:0] shared_sel;
wire          shared_stb;
wire          shared_we;
reg           sim_marker_re = 1'd0;
reg     [7:0] sim_marker_storage = 8'd0;
reg           sim_trace_re = 1'd0;
reg           sim_trace_storage = 1'd0;
reg    [13:0] simsoc_adr = 14'd0;
wire   [31:0] simsoc_dat_r;
reg    [31:0] simsoc_dat_w = 32'd0;
reg           simsoc_next_state = 1'd0;
reg           simsoc_state = 1'd0;
reg           simsoc_we = 1'd0;
reg           simsoc_wishbone_ack = 1'd0;
wire   [29:0] simsoc_wishbone_adr;
wire    [1:0] simsoc_wishbone_bte;
wire    [2:0] simsoc_wishbone_cti;
wire          simsoc_wishbone_cyc;
reg    [31:0] simsoc_wishbone_dat_r = 32'd0;
wire   [31:0] simsoc_wishbone_dat_w;
reg           simsoc_wishbone_err = 1'd0;
wire    [3:0] simsoc_wishbone_sel;
wire          simsoc_wishbone_stb;
wire          simsoc_wishbone_we;
wire          sink_first;
wire          sink_last;
wire    [7:0] sink_payload_data;
wire          sink_ready;
wire          sink_valid;
reg     [4:0] slaves = 5'd0;
reg           soc_rst = 1'd0;
reg           source_first = 1'd0;
reg           source_last = 1'd0;
wire    [7:0] source_payload_data;
wire          source_ready;
wire          source_valid;
wire   [10:0] sram0_adr;
reg           sram0_adr_burst = 1'd0;
wire   [31:0] sram0_dat_r;
wire   [31:0] sram0_dat_w;
reg     [3:0] sram0_we = 4'd0;
wire   [13:0] sram1_adr;
reg           sram1_adr_burst = 1'd0;
wire   [31:0] sram1_dat_r;
wire   [31:0] sram1_dat_w;
reg     [3:0] sram1_we = 4'd0;
reg           sub_re = 1'd0;
reg    [31:0] sub_storage = 32'd0;
wire          sys_clk_1;
wire          sys_rst;
reg           timer_en_re = 1'd0;
reg           timer_en_storage = 1'd0;
reg           timer_enable_re = 1'd0;
reg           timer_enable_storage = 1'd0;
wire          timer_irq;
reg           timer_load_re = 1'd0;
reg    [31:0] timer_load_storage = 32'd0;
reg           timer_pending_r = 1'd0;
reg           timer_pending_re = 1'd0;
wire          timer_pending_status;
wire          timer_pending_we;
reg           timer_reload_re = 1'd0;
reg    [31:0] timer_reload_storage = 32'd0;
reg           timer_status_re = 1'd0;
wire          timer_status_status;
wire          timer_status_we;
reg           timer_update_value_re = 1'd0;
reg           timer_update_value_storage = 1'd0;
reg    [31:0] timer_value = 32'd0;
reg           timer_value_re = 1'd0;
reg    [31:0] timer_value_status = 32'd0;
wire          timer_value_we;
wire          timer_zero0;
wire          timer_zero1;
wire          timer_zero2;
reg           timer_zero_clear = 1'd0;
reg           timer_zero_pending = 1'd0;
wire          timer_zero_status;
wire          timer_zero_trigger;
reg           timer_zero_trigger_d = 1'd0;
reg           uart_enable_re = 1'd0;
reg     [1:0] uart_enable_storage = 2'd0;
wire          uart_irq;
reg     [1:0] uart_pending_r = 2'd0;
reg           uart_pending_re = 1'd0;
reg     [1:0] uart_pending_status = 2'd0;
wire          uart_pending_we;
wire          uart_rx0;
wire          uart_rx1;
wire          uart_rx2;
reg           uart_rx_clear = 1'd0;
reg     [3:0] uart_rx_fifo_consume = 4'd0;
wire          uart_rx_fifo_do_read;
wire          uart_rx_fifo_fifo_in_first;
wire          uart_rx_fifo_fifo_in_last;
wire    [7:0] uart_rx_fifo_fifo_in_payload_data;
wire          uart_rx_fifo_fifo_out_first;
wire          uart_rx_fifo_fifo_out_last;
wire    [7:0] uart_rx_fifo_fifo_out_payload_data;
reg     [4:0] uart_rx_fifo_level0 = 5'd0;
wire    [4:0] uart_rx_fifo_level1;
reg     [3:0] uart_rx_fifo_produce = 4'd0;
wire    [3:0] uart_rx_fifo_rdport_adr;
wire    [9:0] uart_rx_fifo_rdport_dat_r;
wire          uart_rx_fifo_rdport_re;
wire          uart_rx_fifo_re;
reg           uart_rx_fifo_readable = 1'd0;
reg           uart_rx_fifo_replace = 1'd0;
wire          uart_rx_fifo_sink_first;
wire          uart_rx_fifo_sink_last;
wire    [7:0] uart_rx_fifo_sink_payload_data;
wire          uart_rx_fifo_sink_ready;
wire          uart_rx_fifo_sink_valid;
wire          uart_rx_fifo_source_first;
wire          uart_rx_fifo_source_last;
wire    [7:0] uart_rx_fifo_source_payload_data;
wire          uart_rx_fifo_source_ready;
wire          uart_rx_fifo_source_valid;
wire    [9:0] uart_rx_fifo_syncfifo_din;
wire    [9:0] uart_rx_fifo_syncfifo_dout;
wire          uart_rx_fifo_syncfifo_re;
wire          uart_rx_fifo_syncfifo_readable;
wire          uart_rx_fifo_syncfifo_we;
wire          uart_rx_fifo_syncfifo_writable;
reg     [3:0] uart_rx_fifo_wrport_adr = 4'd0;
wire    [9:0] uart_rx_fifo_wrport_dat_r;
wire    [9:0] uart_rx_fifo_wrport_dat_w;
wire          uart_rx_fifo_wrport_we;
reg           uart_rx_pending = 1'd0;
wire          uart_rx_status;
wire          uart_rx_trigger;
reg           uart_rx_trigger_d = 1'd0;
reg           uart_rxempty_re = 1'd0;
wire          uart_rxempty_status;
wire          uart_rxempty_we;
reg           uart_rxfull_re = 1'd0;
wire          uart_rxfull_status;
wire          uart_rxfull_we;
wire    [7:0] uart_rxtx_r;
reg           uart_rxtx_re = 1'd0;
wire    [7:0] uart_rxtx_w;
reg           uart_rxtx_we = 1'd0;
reg           uart_status_re = 1'd0;
reg     [1:0] uart_status_status = 2'd0;
wire          uart_status_we;
wire          uart_tx0;
wire          uart_tx1;
wire          uart_tx2;
reg           uart_tx_clear = 1'd0;
reg     [3:0] uart_tx_fifo_consume = 4'd0;
wire          uart_tx_fifo_do_read;
wire          uart_tx_fifo_fifo_in_first;
wire          uart_tx_fifo_fifo_in_last;
wire    [7:0] uart_tx_fifo_fifo_in_payload_data;
wire          uart_tx_fifo_fifo_out_first;
wire          uart_tx_fifo_fifo_out_last;
wire    [7:0] uart_tx_fifo_fifo_out_payload_data;
reg     [4:0] uart_tx_fifo_level0 = 5'd0;
wire    [4:0] uart_tx_fifo_level1;
reg     [3:0] uart_tx_fifo_produce = 4'd0;
wire    [3:0] uart_tx_fifo_rdport_adr;
wire    [9:0] uart_tx_fifo_rdport_dat_r;
wire          uart_tx_fifo_rdport_re;
wire          uart_tx_fifo_re;
reg           uart_tx_fifo_readable = 1'd0;
reg           uart_tx_fifo_replace = 1'd0;
reg           uart_tx_fifo_sink_first = 1'd0;
reg           uart_tx_fifo_sink_last = 1'd0;
wire    [7:0] uart_tx_fifo_sink_payload_data;
wire          uart_tx_fifo_sink_ready;
wire          uart_tx_fifo_sink_valid;
wire          uart_tx_fifo_source_first;
wire          uart_tx_fifo_source_last;
wire    [7:0] uart_tx_fifo_source_payload_data;
wire          uart_tx_fifo_source_ready;
wire          uart_tx_fifo_source_valid;
wire    [9:0] uart_tx_fifo_syncfifo_din;
wire    [9:0] uart_tx_fifo_syncfifo_dout;
wire          uart_tx_fifo_syncfifo_re;
wire          uart_tx_fifo_syncfifo_readable;
wire          uart_tx_fifo_syncfifo_we;
wire          uart_tx_fifo_syncfifo_writable;
reg     [3:0] uart_tx_fifo_wrport_adr = 4'd0;
wire    [9:0] uart_tx_fifo_wrport_dat_r;
wire    [9:0] uart_tx_fifo_wrport_dat_w;
wire          uart_tx_fifo_wrport_we;
reg           uart_tx_pending = 1'd0;
wire          uart_tx_status;
wire          uart_tx_trigger;
reg           uart_tx_trigger_d = 1'd0;
reg           uart_txempty_re = 1'd0;
wire          uart_txempty_status;
wire          uart_txempty_we;
reg           uart_txfull_re = 1'd0;
wire          uart_txfull_status;
wire          uart_txfull_we;
wire          uart_uart_sink_first;
wire          uart_uart_sink_last;
wire    [7:0] uart_uart_sink_payload_data;
wire          uart_uart_sink_ready;
wire          uart_uart_sink_valid;
wire          uart_uart_source_first;
wire          uart_uart_source_last;
wire    [7:0] uart_uart_source_payload_data;
wire          uart_uart_source_ready;
wire          uart_uart_source_valid;
reg    [31:0] vexriscv = 32'd0;
reg           vexriscv_dbus_err = 1'd0;
reg           vexriscv_debug_bus_ack = 1'd0;
wire   [29:0] vexriscv_debug_bus_adr;
wire    [1:0] vexriscv_debug_bus_bte;
wire    [2:0] vexriscv_debug_bus_cti;
wire          vexriscv_debug_bus_cyc;
reg    [31:0] vexriscv_debug_bus_dat_r = 32'd0;
wire   [31:0] vexriscv_debug_bus_dat_w;
reg           vexriscv_debug_bus_err = 1'd0;
wire    [3:0] vexriscv_debug_bus_sel;
wire          vexriscv_debug_bus_stb;
wire          vexriscv_debug_bus_we;
reg           vexriscv_debug_reset = 1'd0;
reg     [7:0] vexriscv_i_cmd_payload_address = 8'd0;
reg    [31:0] vexriscv_i_cmd_payload_data = 32'd0;
reg           vexriscv_i_cmd_payload_wr = 1'd0;
reg           vexriscv_i_cmd_valid = 1'd0;
reg           vexriscv_ibus_err = 1'd0;
wire          vexriscv_o_cmd_ready;
wire          vexriscv_o_resetOut;
wire   [31:0] vexriscv_o_rsp_data;
reg           vexriscv_reset_debug_logic = 1'd0;
reg           vexriscv_transfer_complete = 1'd0;
reg           vexriscv_transfer_in_progress = 1'd0;
reg           vexriscv_transfer_wait_for_ack = 1'd0;
wire          wait_1;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign reset = (soc_rst | cpu_rst);
assign bus_error = error;
always @(*) begin
    interrupt <= 32'd0;
    interrupt[1] <= timer_irq;
    interrupt[0] <= uart_irq;
end
assign sys_clk_1 = sys_clk;
assign por_clk = sys_clk;
assign sys_rst = int_rst;
assign shared_adr = self0;
assign shared_dat_w = self1;
assign shared_sel = self2;
assign shared_cyc = self3;
assign shared_stb = self4;
assign shared_we = self5;
assign shared_cti = self6;
assign shared_bte = self7;
assign ibus_ibus_dat_r = shared_dat_r;
assign dbus_dbus_dat_r = shared_dat_r;
assign ibus_ibus_ack = (shared_ack & (grant == 1'd0));
assign dbus_dbus_ack = (shared_ack & (grant == 1'd1));
assign ibus_ibus_err = (shared_err & (grant == 1'd0));
assign dbus_dbus_err = (shared_err & (grant == 1'd1));
assign request = {dbus_dbus_cyc, ibus_ibus_cyc};
always @(*) begin
    master <= 5'd0;
    master[0] <= (shared_adr[29:6] == 24'd15732480);
    master[1] <= (shared_adr[29:15] == 1'd0);
    master[2] <= (shared_adr[29:11] == 16'd32768);
    master[3] <= (shared_adr[29:14] == 15'd16384);
    master[4] <= (shared_adr[29:14] == 16'd61440);
end
assign vexriscv_debug_bus_adr = shared_adr;
assign vexriscv_debug_bus_dat_w = shared_dat_w;
assign vexriscv_debug_bus_sel = shared_sel;
assign vexriscv_debug_bus_stb = shared_stb;
assign vexriscv_debug_bus_we = shared_we;
assign vexriscv_debug_bus_cti = shared_cti;
assign vexriscv_debug_bus_bte = shared_bte;
assign ram_bus_adr = shared_adr;
assign ram_bus_dat_w = shared_dat_w;
assign ram_bus_sel = shared_sel;
assign ram_bus_stb = shared_stb;
assign ram_bus_we = shared_we;
assign ram_bus_cti = shared_cti;
assign ram_bus_bte = shared_bte;
assign interface0_ram_bus_adr = shared_adr;
assign interface0_ram_bus_dat_w = shared_dat_w;
assign interface0_ram_bus_sel = shared_sel;
assign interface0_ram_bus_stb = shared_stb;
assign interface0_ram_bus_we = shared_we;
assign interface0_ram_bus_cti = shared_cti;
assign interface0_ram_bus_bte = shared_bte;
assign interface1_ram_bus_adr = shared_adr;
assign interface1_ram_bus_dat_w = shared_dat_w;
assign interface1_ram_bus_sel = shared_sel;
assign interface1_ram_bus_stb = shared_stb;
assign interface1_ram_bus_we = shared_we;
assign interface1_ram_bus_cti = shared_cti;
assign interface1_ram_bus_bte = shared_bte;
assign simsoc_wishbone_adr = shared_adr;
assign simsoc_wishbone_dat_w = shared_dat_w;
assign simsoc_wishbone_sel = shared_sel;
assign simsoc_wishbone_stb = shared_stb;
assign simsoc_wishbone_we = shared_we;
assign simsoc_wishbone_cti = shared_cti;
assign simsoc_wishbone_bte = shared_bte;
assign vexriscv_debug_bus_cyc = (shared_cyc & master[0]);
assign ram_bus_cyc = (shared_cyc & master[1]);
assign interface0_ram_bus_cyc = (shared_cyc & master[2]);
assign interface1_ram_bus_cyc = (shared_cyc & master[3]);
assign simsoc_wishbone_cyc = (shared_cyc & master[4]);
always @(*) begin
    shared_ack <= 1'd0;
    shared_ack <= ((((vexriscv_debug_bus_ack | ram_bus_ack) | interface0_ram_bus_ack) | interface1_ram_bus_ack) | simsoc_wishbone_ack);
    if (done) begin
        shared_ack <= 1'd1;
    end
end
assign shared_err = ((((vexriscv_debug_bus_err | ram_bus_err) | interface0_ram_bus_err) | interface1_ram_bus_err) | simsoc_wishbone_err);
always @(*) begin
    shared_dat_r <= 32'd0;
    shared_dat_r <= ((((({32{slaves[0]}} & vexriscv_debug_bus_dat_r) | ({32{slaves[1]}} & ram_bus_dat_r)) | ({32{slaves[2]}} & interface0_ram_bus_dat_r)) | ({32{slaves[3]}} & interface1_ram_bus_dat_r)) | ({32{slaves[4]}} & simsoc_wishbone_dat_r));
    if (done) begin
        shared_dat_r <= 32'd4294967295;
    end
end
assign wait_1 = ((shared_stb & shared_cyc) & (~shared_ack));
always @(*) begin
    error <= 1'd0;
    if (done) begin
        error <= 1'd1;
    end
end
assign done = (count == 1'd0);
assign bus_errors_status = bus_errors;
assign adr = ram_bus_adr[14:0];
assign ram_bus_dat_r = dat_r;
always @(*) begin
    sram0_we <= 4'd0;
    sram0_we[0] <= (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & interface0_ram_bus_we) & interface0_ram_bus_sel[0]);
    sram0_we[1] <= (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & interface0_ram_bus_we) & interface0_ram_bus_sel[1]);
    sram0_we[2] <= (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & interface0_ram_bus_we) & interface0_ram_bus_sel[2]);
    sram0_we[3] <= (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & interface0_ram_bus_we) & interface0_ram_bus_sel[3]);
end
assign sram0_adr = interface0_ram_bus_adr[10:0];
assign interface0_ram_bus_dat_r = sram0_dat_r;
assign sram0_dat_w = interface0_ram_bus_dat_w;
always @(*) begin
    sram1_we <= 4'd0;
    sram1_we[0] <= (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & interface1_ram_bus_we) & interface1_ram_bus_sel[0]);
    sram1_we[1] <= (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & interface1_ram_bus_we) & interface1_ram_bus_sel[1]);
    sram1_we[2] <= (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & interface1_ram_bus_we) & interface1_ram_bus_sel[2]);
    sram1_we[3] <= (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & interface1_ram_bus_we) & interface1_ram_bus_sel[3]);
end
assign sram1_adr = interface1_ram_bus_adr[13:0];
assign interface1_ram_bus_dat_r = sram1_dat_r;
assign sram1_dat_w = interface1_ram_bus_dat_w;
assign serial_source_valid = sink_valid;
assign serial_source_data = sink_payload_data;
assign sink_ready = serial_source_ready;
assign source_valid = serial_sink_valid;
assign source_payload_data = serial_sink_data;
assign serial_sink_ready = source_ready;
assign uart_uart_sink_valid = source_valid;
assign source_ready = uart_uart_sink_ready;
assign uart_uart_sink_first = source_first;
assign uart_uart_sink_last = source_last;
assign uart_uart_sink_payload_data = source_payload_data;
assign sink_valid = uart_uart_source_valid;
assign uart_uart_source_ready = sink_ready;
assign sink_first = uart_uart_source_first;
assign sink_last = uart_uart_source_last;
assign sink_payload_data = uart_uart_source_payload_data;
assign uart_tx_fifo_sink_valid = uart_rxtx_re;
assign uart_tx_fifo_sink_payload_data = uart_rxtx_r;
assign uart_uart_source_valid = uart_tx_fifo_source_valid;
assign uart_tx_fifo_source_ready = uart_uart_source_ready;
assign uart_uart_source_first = uart_tx_fifo_source_first;
assign uart_uart_source_last = uart_tx_fifo_source_last;
assign uart_uart_source_payload_data = uart_tx_fifo_source_payload_data;
assign uart_txfull_status = (~uart_tx_fifo_sink_ready);
assign uart_txempty_status = (~uart_tx_fifo_source_valid);
assign uart_tx_trigger = uart_tx_fifo_sink_ready;
assign uart_rx_fifo_sink_valid = uart_uart_sink_valid;
assign uart_uart_sink_ready = uart_rx_fifo_sink_ready;
assign uart_rx_fifo_sink_first = uart_uart_sink_first;
assign uart_rx_fifo_sink_last = uart_uart_sink_last;
assign uart_rx_fifo_sink_payload_data = uart_uart_sink_payload_data;
assign uart_rxtx_w = uart_rx_fifo_source_payload_data;
assign uart_rx_fifo_source_ready = (uart_rx_clear | (1'd0 & uart_rxtx_we));
assign uart_rxempty_status = (~uart_rx_fifo_source_valid);
assign uart_rxfull_status = (~uart_rx_fifo_sink_ready);
assign uart_rx_trigger = uart_rx_fifo_source_valid;
assign uart_tx0 = uart_tx_status;
assign uart_tx1 = uart_tx_pending;
always @(*) begin
    uart_tx_clear <= 1'd0;
    if ((uart_pending_re & uart_pending_r[0])) begin
        uart_tx_clear <= 1'd1;
    end
end
assign uart_rx0 = uart_rx_status;
assign uart_rx1 = uart_rx_pending;
always @(*) begin
    uart_rx_clear <= 1'd0;
    if ((uart_pending_re & uart_pending_r[1])) begin
        uart_rx_clear <= 1'd1;
    end
end
assign uart_irq = ((uart_pending_status[0] & uart_enable_storage[0]) | (uart_pending_status[1] & uart_enable_storage[1]));
assign uart_tx_status = uart_tx_trigger;
assign uart_rx_status = uart_rx_trigger;
assign uart_tx_fifo_syncfifo_din = {uart_tx_fifo_fifo_in_last, uart_tx_fifo_fifo_in_first, uart_tx_fifo_fifo_in_payload_data};
assign {uart_tx_fifo_fifo_out_last, uart_tx_fifo_fifo_out_first, uart_tx_fifo_fifo_out_payload_data} = uart_tx_fifo_syncfifo_dout;
assign {uart_tx_fifo_fifo_out_last, uart_tx_fifo_fifo_out_first, uart_tx_fifo_fifo_out_payload_data} = uart_tx_fifo_syncfifo_dout;
assign {uart_tx_fifo_fifo_out_last, uart_tx_fifo_fifo_out_first, uart_tx_fifo_fifo_out_payload_data} = uart_tx_fifo_syncfifo_dout;
assign uart_tx_fifo_sink_ready = uart_tx_fifo_syncfifo_writable;
assign uart_tx_fifo_syncfifo_we = uart_tx_fifo_sink_valid;
assign uart_tx_fifo_fifo_in_first = uart_tx_fifo_sink_first;
assign uart_tx_fifo_fifo_in_last = uart_tx_fifo_sink_last;
assign uart_tx_fifo_fifo_in_payload_data = uart_tx_fifo_sink_payload_data;
assign uart_tx_fifo_source_valid = uart_tx_fifo_readable;
assign uart_tx_fifo_source_first = uart_tx_fifo_fifo_out_first;
assign uart_tx_fifo_source_last = uart_tx_fifo_fifo_out_last;
assign uart_tx_fifo_source_payload_data = uart_tx_fifo_fifo_out_payload_data;
assign uart_tx_fifo_re = uart_tx_fifo_source_ready;
assign uart_tx_fifo_syncfifo_re = (uart_tx_fifo_syncfifo_readable & ((~uart_tx_fifo_readable) | uart_tx_fifo_re));
assign uart_tx_fifo_level1 = (uart_tx_fifo_level0 + uart_tx_fifo_readable);
always @(*) begin
    uart_tx_fifo_wrport_adr <= 4'd0;
    if (uart_tx_fifo_replace) begin
        uart_tx_fifo_wrport_adr <= (uart_tx_fifo_produce - 1'd1);
    end else begin
        uart_tx_fifo_wrport_adr <= uart_tx_fifo_produce;
    end
end
assign uart_tx_fifo_wrport_dat_w = uart_tx_fifo_syncfifo_din;
assign uart_tx_fifo_wrport_we = (uart_tx_fifo_syncfifo_we & (uart_tx_fifo_syncfifo_writable | uart_tx_fifo_replace));
assign uart_tx_fifo_do_read = (uart_tx_fifo_syncfifo_readable & uart_tx_fifo_syncfifo_re);
assign uart_tx_fifo_rdport_adr = uart_tx_fifo_consume;
assign uart_tx_fifo_syncfifo_dout = uart_tx_fifo_rdport_dat_r;
assign uart_tx_fifo_rdport_re = uart_tx_fifo_do_read;
assign uart_tx_fifo_syncfifo_writable = (uart_tx_fifo_level0 != 5'd16);
assign uart_tx_fifo_syncfifo_readable = (uart_tx_fifo_level0 != 1'd0);
assign uart_rx_fifo_syncfifo_din = {uart_rx_fifo_fifo_in_last, uart_rx_fifo_fifo_in_first, uart_rx_fifo_fifo_in_payload_data};
assign {uart_rx_fifo_fifo_out_last, uart_rx_fifo_fifo_out_first, uart_rx_fifo_fifo_out_payload_data} = uart_rx_fifo_syncfifo_dout;
assign {uart_rx_fifo_fifo_out_last, uart_rx_fifo_fifo_out_first, uart_rx_fifo_fifo_out_payload_data} = uart_rx_fifo_syncfifo_dout;
assign {uart_rx_fifo_fifo_out_last, uart_rx_fifo_fifo_out_first, uart_rx_fifo_fifo_out_payload_data} = uart_rx_fifo_syncfifo_dout;
assign uart_rx_fifo_sink_ready = uart_rx_fifo_syncfifo_writable;
assign uart_rx_fifo_syncfifo_we = uart_rx_fifo_sink_valid;
assign uart_rx_fifo_fifo_in_first = uart_rx_fifo_sink_first;
assign uart_rx_fifo_fifo_in_last = uart_rx_fifo_sink_last;
assign uart_rx_fifo_fifo_in_payload_data = uart_rx_fifo_sink_payload_data;
assign uart_rx_fifo_source_valid = uart_rx_fifo_readable;
assign uart_rx_fifo_source_first = uart_rx_fifo_fifo_out_first;
assign uart_rx_fifo_source_last = uart_rx_fifo_fifo_out_last;
assign uart_rx_fifo_source_payload_data = uart_rx_fifo_fifo_out_payload_data;
assign uart_rx_fifo_re = uart_rx_fifo_source_ready;
assign uart_rx_fifo_syncfifo_re = (uart_rx_fifo_syncfifo_readable & ((~uart_rx_fifo_readable) | uart_rx_fifo_re));
assign uart_rx_fifo_level1 = (uart_rx_fifo_level0 + uart_rx_fifo_readable);
always @(*) begin
    uart_rx_fifo_wrport_adr <= 4'd0;
    if (uart_rx_fifo_replace) begin
        uart_rx_fifo_wrport_adr <= (uart_rx_fifo_produce - 1'd1);
    end else begin
        uart_rx_fifo_wrport_adr <= uart_rx_fifo_produce;
    end
end
assign uart_rx_fifo_wrport_dat_w = uart_rx_fifo_syncfifo_din;
assign uart_rx_fifo_wrport_we = (uart_rx_fifo_syncfifo_we & (uart_rx_fifo_syncfifo_writable | uart_rx_fifo_replace));
assign uart_rx_fifo_do_read = (uart_rx_fifo_syncfifo_readable & uart_rx_fifo_syncfifo_re);
assign uart_rx_fifo_rdport_adr = uart_rx_fifo_consume;
assign uart_rx_fifo_syncfifo_dout = uart_rx_fifo_rdport_dat_r;
assign uart_rx_fifo_rdport_re = uart_rx_fifo_do_read;
assign uart_rx_fifo_syncfifo_writable = (uart_rx_fifo_level0 != 5'd16);
assign uart_rx_fifo_syncfifo_readable = (uart_rx_fifo_level0 != 1'd0);
assign timer_zero_trigger = (timer_value == 1'd0);
assign timer_zero0 = timer_zero_status;
assign timer_zero1 = timer_zero_pending;
always @(*) begin
    timer_zero_clear <= 1'd0;
    if ((timer_pending_re & timer_pending_r)) begin
        timer_zero_clear <= 1'd1;
    end
end
assign timer_irq = (timer_pending_status & timer_enable_storage);
assign timer_zero_status = timer_zero_trigger;
assign sim_trace = sim_trace_storage;
always @(*) begin
    simsoc_next_state <= 1'd0;
    simsoc_next_state <= simsoc_state;
    case (simsoc_state)
        1'd1: begin
            simsoc_next_state <= 1'd0;
        end
        default: begin
            if ((simsoc_wishbone_cyc & simsoc_wishbone_stb)) begin
                simsoc_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    simsoc_adr <= 14'd0;
    case (simsoc_state)
        1'd1: begin
        end
        default: begin
            if ((simsoc_wishbone_cyc & simsoc_wishbone_stb)) begin
                simsoc_adr <= simsoc_wishbone_adr;
            end
        end
    endcase
end
always @(*) begin
    simsoc_we <= 1'd0;
    case (simsoc_state)
        1'd1: begin
        end
        default: begin
            if ((simsoc_wishbone_cyc & simsoc_wishbone_stb)) begin
                simsoc_we <= (simsoc_wishbone_we & (simsoc_wishbone_sel != 1'd0));
            end
        end
    endcase
end
always @(*) begin
    simsoc_dat_w <= 32'd0;
    case (simsoc_state)
        1'd1: begin
        end
        default: begin
            simsoc_dat_w <= simsoc_wishbone_dat_w;
        end
    endcase
end
always @(*) begin
    simsoc_wishbone_dat_r <= 32'd0;
    case (simsoc_state)
        1'd1: begin
            simsoc_wishbone_dat_r <= simsoc_dat_r;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    simsoc_wishbone_ack <= 1'd0;
    case (simsoc_state)
        1'd1: begin
            simsoc_wishbone_ack <= 1'd1;
        end
        default: begin
        end
    endcase
end
assign csr_bankarray_csrbank0_sel = (csr_bankarray_interface0_bank_bus_adr[13:9] == 1'd0);
assign csr_bankarray_csrbank0_reset0_r = csr_bankarray_interface0_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank0_reset0_re <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank0_reset0_re <= csr_bankarray_interface0_bank_bus_we;
    end
end
always @(*) begin
    csr_bankarray_csrbank0_reset0_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank0_reset0_we <= (~csr_bankarray_interface0_bank_bus_we);
    end
end
assign csr_bankarray_csrbank0_scratch0_r = csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank0_scratch0_re <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank0_scratch0_re <= csr_bankarray_interface0_bank_bus_we;
    end
end
always @(*) begin
    csr_bankarray_csrbank0_scratch0_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank0_scratch0_we <= (~csr_bankarray_interface0_bank_bus_we);
    end
end
assign csr_bankarray_csrbank0_bus_errors_r = csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank0_bus_errors_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank0_bus_errors_we <= (~csr_bankarray_interface0_bank_bus_we);
    end
end
always @(*) begin
    csr_bankarray_csrbank0_bus_errors_re <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank0_bus_errors_re <= csr_bankarray_interface0_bank_bus_we;
    end
end
always @(*) begin
    soc_rst <= 1'd0;
    if (reset_re) begin
        soc_rst <= reset_storage[0];
    end
end
assign cpu_rst = reset_storage[1];
assign csr_bankarray_csrbank0_reset0_w = reset_storage[1:0];
assign csr_bankarray_csrbank0_scratch0_w = scratch_storage[31:0];
assign csr_bankarray_csrbank0_bus_errors_w = bus_errors_status[31:0];
assign bus_errors_we = csr_bankarray_csrbank0_bus_errors_we;
assign csr_bankarray_sel = (csr_bankarray_sram_bus_adr[13:9] == 1'd1);
always @(*) begin
    csr_bankarray_sram_bus_dat_r <= 32'd0;
    if (csr_bankarray_sel_r) begin
        csr_bankarray_sram_bus_dat_r <= csr_bankarray_dat_r;
    end
end
assign csr_bankarray_adr = csr_bankarray_sram_bus_adr[5:0];
assign csr_bankarray_csrbank1_sel = (csr_bankarray_interface1_bank_bus_adr[13:9] == 2'd2);
assign csr_bankarray_csrbank1_n10_r = csr_bankarray_interface1_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank1_n10_re <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank1_n10_re <= csr_bankarray_interface1_bank_bus_we;
    end
end
always @(*) begin
    csr_bankarray_csrbank1_n10_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank1_n10_we <= (~csr_bankarray_interface1_bank_bus_we);
    end
end
assign csr_bankarray_csrbank1_n20_r = csr_bankarray_interface1_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank1_n20_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank1_n20_we <= (~csr_bankarray_interface1_bank_bus_we);
    end
end
always @(*) begin
    csr_bankarray_csrbank1_n20_re <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank1_n20_re <= csr_bankarray_interface1_bank_bus_we;
    end
end
assign csr_bankarray_csrbank1_sub0_r = csr_bankarray_interface1_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank1_sub0_re <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank1_sub0_re <= csr_bankarray_interface1_bank_bus_we;
    end
end
always @(*) begin
    csr_bankarray_csrbank1_sub0_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank1_sub0_we <= (~csr_bankarray_interface1_bank_bus_we);
    end
end
assign csr_bankarray_csrbank1_isZero_r = csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank1_isZero_re <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank1_isZero_re <= csr_bankarray_interface1_bank_bus_we;
    end
end
always @(*) begin
    csr_bankarray_csrbank1_isZero_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank1_isZero_we <= (~csr_bankarray_interface1_bank_bus_we);
    end
end
assign csr_bankarray_csrbank1_isNaR_r = csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank1_isNaR_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank1_isNaR_we <= (~csr_bankarray_interface1_bank_bus_we);
    end
end
always @(*) begin
    csr_bankarray_csrbank1_isNaR_re <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank1_isNaR_re <= csr_bankarray_interface1_bank_bus_we;
    end
end
assign csr_bankarray_csrbank1_n10_w = n1_storage[31:0];
assign csr_bankarray_csrbank1_n20_w = n2_storage[31:0];
assign csr_bankarray_csrbank1_sub0_w = sub_storage[31:0];
assign csr_bankarray_csrbank1_isZero_w = isZero_status;
assign isZero_we = csr_bankarray_csrbank1_isZero_we;
assign csr_bankarray_csrbank1_isNaR_w = isNaR_status;
assign isNaR_we = csr_bankarray_csrbank1_isNaR_we;
assign csr_bankarray_csrbank2_sel = (csr_bankarray_interface2_bank_bus_adr[13:9] == 2'd3);
assign finish_r = csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    finish_re <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
        finish_re <= csr_bankarray_interface2_bank_bus_we;
    end
end
always @(*) begin
    finish_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
        finish_we <= (~csr_bankarray_interface2_bank_bus_we);
    end
end
assign csr_bankarray_csrbank3_sel = (csr_bankarray_interface3_bank_bus_adr[13:9] == 3'd4);
assign csr_bankarray_csrbank3_marker0_r = csr_bankarray_interface3_bank_bus_dat_w[7:0];
always @(*) begin
    csr_bankarray_csrbank3_marker0_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank3_marker0_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
always @(*) begin
    csr_bankarray_csrbank3_marker0_re <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank3_marker0_re <= csr_bankarray_interface3_bank_bus_we;
    end
end
assign csr_bankarray_csrbank3_marker0_w = sim_marker_storage[7:0];
assign csr_bankarray_csrbank4_sel = (csr_bankarray_interface4_bank_bus_adr[13:9] == 3'd5);
assign csr_bankarray_csrbank4_enable0_r = csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank4_enable0_re <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank4_enable0_re <= csr_bankarray_interface4_bank_bus_we;
    end
end
always @(*) begin
    csr_bankarray_csrbank4_enable0_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank4_enable0_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_enable0_w = sim_trace_storage;
assign csr_bankarray_csrbank5_sel = (csr_bankarray_interface5_bank_bus_adr[13:9] == 3'd6);
assign csr_bankarray_csrbank5_load0_r = csr_bankarray_interface5_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank5_load0_re <= 1'd0;
    if ((csr_bankarray_csrbank5_sel & (csr_bankarray_interface5_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank5_load0_re <= csr_bankarray_interface5_bank_bus_we;
    end
end
always @(*) begin
    csr_bankarray_csrbank5_load0_we <= 1'd0;
    if ((csr_bankarray_csrbank5_sel & (csr_bankarray_interface5_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank5_load0_we <= (~csr_bankarray_interface5_bank_bus_we);
    end
end
assign csr_bankarray_csrbank5_reload0_r = csr_bankarray_interface5_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank5_reload0_we <= 1'd0;
    if ((csr_bankarray_csrbank5_sel & (csr_bankarray_interface5_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank5_reload0_we <= (~csr_bankarray_interface5_bank_bus_we);
    end
end
always @(*) begin
    csr_bankarray_csrbank5_reload0_re <= 1'd0;
    if ((csr_bankarray_csrbank5_sel & (csr_bankarray_interface5_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank5_reload0_re <= csr_bankarray_interface5_bank_bus_we;
    end
end
assign csr_bankarray_csrbank5_en0_r = csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank5_en0_we <= 1'd0;
    if ((csr_bankarray_csrbank5_sel & (csr_bankarray_interface5_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank5_en0_we <= (~csr_bankarray_interface5_bank_bus_we);
    end
end
always @(*) begin
    csr_bankarray_csrbank5_en0_re <= 1'd0;
    if ((csr_bankarray_csrbank5_sel & (csr_bankarray_interface5_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank5_en0_re <= csr_bankarray_interface5_bank_bus_we;
    end
end
assign csr_bankarray_csrbank5_update_value0_r = csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank5_update_value0_re <= 1'd0;
    if ((csr_bankarray_csrbank5_sel & (csr_bankarray_interface5_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank5_update_value0_re <= csr_bankarray_interface5_bank_bus_we;
    end
end
always @(*) begin
    csr_bankarray_csrbank5_update_value0_we <= 1'd0;
    if ((csr_bankarray_csrbank5_sel & (csr_bankarray_interface5_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank5_update_value0_we <= (~csr_bankarray_interface5_bank_bus_we);
    end
end
assign csr_bankarray_csrbank5_value_r = csr_bankarray_interface5_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank5_value_we <= 1'd0;
    if ((csr_bankarray_csrbank5_sel & (csr_bankarray_interface5_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank5_value_we <= (~csr_bankarray_interface5_bank_bus_we);
    end
end
always @(*) begin
    csr_bankarray_csrbank5_value_re <= 1'd0;
    if ((csr_bankarray_csrbank5_sel & (csr_bankarray_interface5_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank5_value_re <= csr_bankarray_interface5_bank_bus_we;
    end
end
assign csr_bankarray_csrbank5_ev_status_r = csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank5_ev_status_we <= 1'd0;
    if ((csr_bankarray_csrbank5_sel & (csr_bankarray_interface5_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank5_ev_status_we <= (~csr_bankarray_interface5_bank_bus_we);
    end
end
always @(*) begin
    csr_bankarray_csrbank5_ev_status_re <= 1'd0;
    if ((csr_bankarray_csrbank5_sel & (csr_bankarray_interface5_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank5_ev_status_re <= csr_bankarray_interface5_bank_bus_we;
    end
end
assign csr_bankarray_csrbank5_ev_pending_r = csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank5_ev_pending_re <= 1'd0;
    if ((csr_bankarray_csrbank5_sel & (csr_bankarray_interface5_bank_bus_adr[8:0] == 3'd6))) begin
        csr_bankarray_csrbank5_ev_pending_re <= csr_bankarray_interface5_bank_bus_we;
    end
end
always @(*) begin
    csr_bankarray_csrbank5_ev_pending_we <= 1'd0;
    if ((csr_bankarray_csrbank5_sel & (csr_bankarray_interface5_bank_bus_adr[8:0] == 3'd6))) begin
        csr_bankarray_csrbank5_ev_pending_we <= (~csr_bankarray_interface5_bank_bus_we);
    end
end
assign csr_bankarray_csrbank5_ev_enable0_r = csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank5_ev_enable0_we <= 1'd0;
    if ((csr_bankarray_csrbank5_sel & (csr_bankarray_interface5_bank_bus_adr[8:0] == 3'd7))) begin
        csr_bankarray_csrbank5_ev_enable0_we <= (~csr_bankarray_interface5_bank_bus_we);
    end
end
always @(*) begin
    csr_bankarray_csrbank5_ev_enable0_re <= 1'd0;
    if ((csr_bankarray_csrbank5_sel & (csr_bankarray_interface5_bank_bus_adr[8:0] == 3'd7))) begin
        csr_bankarray_csrbank5_ev_enable0_re <= csr_bankarray_interface5_bank_bus_we;
    end
end
assign csr_bankarray_csrbank5_load0_w = timer_load_storage[31:0];
assign csr_bankarray_csrbank5_reload0_w = timer_reload_storage[31:0];
assign csr_bankarray_csrbank5_en0_w = timer_en_storage;
assign csr_bankarray_csrbank5_update_value0_w = timer_update_value_storage;
assign csr_bankarray_csrbank5_value_w = timer_value_status[31:0];
assign timer_value_we = csr_bankarray_csrbank5_value_we;
assign timer_status_status = timer_zero0;
assign csr_bankarray_csrbank5_ev_status_w = timer_status_status;
assign timer_status_we = csr_bankarray_csrbank5_ev_status_we;
assign timer_pending_status = timer_zero1;
assign csr_bankarray_csrbank5_ev_pending_w = timer_pending_status;
assign timer_pending_we = csr_bankarray_csrbank5_ev_pending_we;
assign timer_zero2 = timer_enable_storage;
assign csr_bankarray_csrbank5_ev_enable0_w = timer_enable_storage;
assign csr_bankarray_csrbank6_sel = (csr_bankarray_interface6_bank_bus_adr[13:9] == 3'd7);
assign uart_rxtx_r = csr_bankarray_interface6_bank_bus_dat_w[7:0];
always @(*) begin
    uart_rxtx_we <= 1'd0;
    if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 1'd0))) begin
        uart_rxtx_we <= (~csr_bankarray_interface6_bank_bus_we);
    end
end
always @(*) begin
    uart_rxtx_re <= 1'd0;
    if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 1'd0))) begin
        uart_rxtx_re <= csr_bankarray_interface6_bank_bus_we;
    end
end
assign csr_bankarray_csrbank6_txfull_r = csr_bankarray_interface6_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank6_txfull_we <= 1'd0;
    if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank6_txfull_we <= (~csr_bankarray_interface6_bank_bus_we);
    end
end
always @(*) begin
    csr_bankarray_csrbank6_txfull_re <= 1'd0;
    if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank6_txfull_re <= csr_bankarray_interface6_bank_bus_we;
    end
end
assign csr_bankarray_csrbank6_rxempty_r = csr_bankarray_interface6_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank6_rxempty_re <= 1'd0;
    if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank6_rxempty_re <= csr_bankarray_interface6_bank_bus_we;
    end
end
always @(*) begin
    csr_bankarray_csrbank6_rxempty_we <= 1'd0;
    if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank6_rxempty_we <= (~csr_bankarray_interface6_bank_bus_we);
    end
end
assign csr_bankarray_csrbank6_ev_status_r = csr_bankarray_interface6_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank6_ev_status_re <= 1'd0;
    if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank6_ev_status_re <= csr_bankarray_interface6_bank_bus_we;
    end
end
always @(*) begin
    csr_bankarray_csrbank6_ev_status_we <= 1'd0;
    if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank6_ev_status_we <= (~csr_bankarray_interface6_bank_bus_we);
    end
end
assign csr_bankarray_csrbank6_ev_pending_r = csr_bankarray_interface6_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank6_ev_pending_we <= 1'd0;
    if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank6_ev_pending_we <= (~csr_bankarray_interface6_bank_bus_we);
    end
end
always @(*) begin
    csr_bankarray_csrbank6_ev_pending_re <= 1'd0;
    if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank6_ev_pending_re <= csr_bankarray_interface6_bank_bus_we;
    end
end
assign csr_bankarray_csrbank6_ev_enable0_r = csr_bankarray_interface6_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank6_ev_enable0_we <= 1'd0;
    if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank6_ev_enable0_we <= (~csr_bankarray_interface6_bank_bus_we);
    end
end
always @(*) begin
    csr_bankarray_csrbank6_ev_enable0_re <= 1'd0;
    if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank6_ev_enable0_re <= csr_bankarray_interface6_bank_bus_we;
    end
end
assign csr_bankarray_csrbank6_txempty_r = csr_bankarray_interface6_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank6_txempty_re <= 1'd0;
    if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd6))) begin
        csr_bankarray_csrbank6_txempty_re <= csr_bankarray_interface6_bank_bus_we;
    end
end
always @(*) begin
    csr_bankarray_csrbank6_txempty_we <= 1'd0;
    if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd6))) begin
        csr_bankarray_csrbank6_txempty_we <= (~csr_bankarray_interface6_bank_bus_we);
    end
end
assign csr_bankarray_csrbank6_rxfull_r = csr_bankarray_interface6_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank6_rxfull_we <= 1'd0;
    if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd7))) begin
        csr_bankarray_csrbank6_rxfull_we <= (~csr_bankarray_interface6_bank_bus_we);
    end
end
always @(*) begin
    csr_bankarray_csrbank6_rxfull_re <= 1'd0;
    if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd7))) begin
        csr_bankarray_csrbank6_rxfull_re <= csr_bankarray_interface6_bank_bus_we;
    end
end
assign csr_bankarray_csrbank6_txfull_w = uart_txfull_status;
assign uart_txfull_we = csr_bankarray_csrbank6_txfull_we;
assign csr_bankarray_csrbank6_rxempty_w = uart_rxempty_status;
assign uart_rxempty_we = csr_bankarray_csrbank6_rxempty_we;
always @(*) begin
    uart_status_status <= 2'd0;
    uart_status_status[0] <= uart_tx0;
    uart_status_status[1] <= uart_rx0;
end
assign csr_bankarray_csrbank6_ev_status_w = uart_status_status[1:0];
assign uart_status_we = csr_bankarray_csrbank6_ev_status_we;
always @(*) begin
    uart_pending_status <= 2'd0;
    uart_pending_status[0] <= uart_tx1;
    uart_pending_status[1] <= uart_rx1;
end
assign csr_bankarray_csrbank6_ev_pending_w = uart_pending_status[1:0];
assign uart_pending_we = csr_bankarray_csrbank6_ev_pending_we;
assign uart_tx2 = uart_enable_storage[0];
assign uart_rx2 = uart_enable_storage[1];
assign csr_bankarray_csrbank6_ev_enable0_w = uart_enable_storage[1:0];
assign csr_bankarray_csrbank6_txempty_w = uart_txempty_status;
assign uart_txempty_we = csr_bankarray_csrbank6_txempty_we;
assign csr_bankarray_csrbank6_rxfull_w = uart_rxfull_status;
assign uart_rxfull_we = csr_bankarray_csrbank6_rxfull_we;
assign csr_interconnect_adr = simsoc_adr;
assign csr_interconnect_we = simsoc_we;
assign csr_interconnect_dat_w = simsoc_dat_w;
assign simsoc_dat_r = csr_interconnect_dat_r;
assign csr_bankarray_interface0_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface1_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface2_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface3_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface4_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface5_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface6_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_sram_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface0_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface1_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface2_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface3_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface4_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface5_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface6_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_sram_bus_we = csr_interconnect_we;
assign csr_bankarray_interface0_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface1_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface2_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface3_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface4_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface5_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface6_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_sram_bus_dat_w = csr_interconnect_dat_w;
assign csr_interconnect_dat_r = (((((((csr_bankarray_interface0_bank_bus_dat_r | csr_bankarray_interface1_bank_bus_dat_r) | csr_bankarray_interface2_bank_bus_dat_r) | csr_bankarray_interface3_bank_bus_dat_r) | csr_bankarray_interface4_bank_bus_dat_r) | csr_bankarray_interface5_bank_bus_dat_r) | csr_bankarray_interface6_bank_bus_dat_r) | csr_bankarray_sram_bus_dat_r);
always @(*) begin
    self0 <= 30'd0;
    case (grant)
        1'd0: begin
            self0 <= ibus_ibus_adr;
        end
        default: begin
            self0 <= dbus_dbus_adr;
        end
    endcase
end
always @(*) begin
    self1 <= 32'd0;
    case (grant)
        1'd0: begin
            self1 <= ibus_ibus_dat_w;
        end
        default: begin
            self1 <= dbus_dbus_dat_w;
        end
    endcase
end
always @(*) begin
    self2 <= 4'd0;
    case (grant)
        1'd0: begin
            self2 <= ibus_ibus_sel;
        end
        default: begin
            self2 <= dbus_dbus_sel;
        end
    endcase
end
always @(*) begin
    self3 <= 1'd0;
    case (grant)
        1'd0: begin
            self3 <= ibus_ibus_cyc;
        end
        default: begin
            self3 <= dbus_dbus_cyc;
        end
    endcase
end
always @(*) begin
    self4 <= 1'd0;
    case (grant)
        1'd0: begin
            self4 <= ibus_ibus_stb;
        end
        default: begin
            self4 <= dbus_dbus_stb;
        end
    endcase
end
always @(*) begin
    self5 <= 1'd0;
    case (grant)
        1'd0: begin
            self5 <= ibus_ibus_we;
        end
        default: begin
            self5 <= dbus_dbus_we;
        end
    endcase
end
always @(*) begin
    self6 <= 3'd0;
    case (grant)
        1'd0: begin
            self6 <= ibus_ibus_cti;
        end
        default: begin
            self6 <= dbus_dbus_cti;
        end
    endcase
end
always @(*) begin
    self7 <= 2'd0;
    case (grant)
        1'd0: begin
            self7 <= ibus_ibus_bte;
        end
        default: begin
            self7 <= dbus_dbus_bte;
        end
    endcase
end


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge por_clk) begin
    int_rst <= 1'd0;
end

always @(posedge sys_clk_1) begin
    case (grant)
        1'd0: begin
            if ((~request[0])) begin
                if (request[1]) begin
                    grant <= 1'd1;
                end
            end
        end
        1'd1: begin
            if ((~request[1])) begin
                if (request[0]) begin
                    grant <= 1'd0;
                end
            end
        end
    endcase
    slaves <= master;
    if (wait_1) begin
        if ((~done)) begin
            count <= (count - 1'd1);
        end
    end else begin
        count <= 20'd1000000;
    end
    if ((bus_errors != 32'd4294967295)) begin
        if (bus_error) begin
            bus_errors <= (bus_errors + 1'd1);
        end
    end
    vexriscv_debug_bus_dat_r <= vexriscv_o_rsp_data;
    vexriscv_debug_reset <= (vexriscv_reset_debug_logic | sys_rst);
    if (((((vexriscv_debug_bus_stb & vexriscv_debug_bus_cyc) & (~vexriscv_transfer_in_progress)) & (~vexriscv_transfer_complete)) & (~vexriscv_transfer_wait_for_ack))) begin
        vexriscv_i_cmd_payload_data <= vexriscv_debug_bus_dat_w;
        vexriscv_i_cmd_payload_address <= ((vexriscv_debug_bus_adr[5:0] <<< 2'd2) | 1'd0);
        vexriscv_i_cmd_payload_wr <= vexriscv_debug_bus_we;
        vexriscv_i_cmd_valid <= 1'd1;
        vexriscv_transfer_in_progress <= 1'd1;
        vexriscv_transfer_complete <= 1'd0;
        vexriscv_debug_bus_ack <= 1'd0;
    end else begin
        if (vexriscv_transfer_in_progress) begin
            if (vexriscv_o_cmd_ready) begin
                vexriscv_i_cmd_valid <= 1'd0;
                vexriscv_i_cmd_payload_wr <= 1'd0;
                vexriscv_transfer_complete <= 1'd1;
                vexriscv_transfer_in_progress <= 1'd0;
            end
        end else begin
            if (vexriscv_transfer_complete) begin
                vexriscv_transfer_complete <= 1'd0;
                vexriscv_debug_bus_ack <= 1'd1;
                vexriscv_transfer_wait_for_ack <= 1'd1;
            end else begin
                if ((vexriscv_transfer_wait_for_ack & (~(vexriscv_debug_bus_stb & vexriscv_debug_bus_cyc)))) begin
                    vexriscv_transfer_wait_for_ack <= 1'd0;
                    vexriscv_debug_bus_ack <= 1'd0;
                end
            end
        end
    end
    if (vexriscv_o_resetOut) begin
        if ((ibus_ibus_cyc & ibus_ibus_stb)) begin
            vexriscv_ibus_err <= 1'd1;
        end else begin
            vexriscv_ibus_err <= 1'd0;
        end
        if ((dbus_dbus_cyc & dbus_dbus_stb)) begin
            vexriscv_dbus_err <= 1'd1;
        end else begin
            vexriscv_dbus_err <= 1'd0;
        end
        vexriscv_reset_debug_logic <= 1'd1;
    end else begin
        vexriscv_reset_debug_logic <= 1'd0;
    end
    ram_bus_ack <= 1'd0;
    if (((ram_bus_cyc & ram_bus_stb) & ((~ram_bus_ack) | adr_burst))) begin
        ram_bus_ack <= 1'd1;
    end
    interface0_ram_bus_ack <= 1'd0;
    if (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & ((~interface0_ram_bus_ack) | sram0_adr_burst))) begin
        interface0_ram_bus_ack <= 1'd1;
    end
    interface1_ram_bus_ack <= 1'd0;
    if (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & ((~interface1_ram_bus_ack) | sram1_adr_burst))) begin
        interface1_ram_bus_ack <= 1'd1;
    end
    if (uart_tx_clear) begin
        uart_tx_pending <= 1'd0;
    end
    uart_tx_trigger_d <= uart_tx_trigger;
    if ((uart_tx_trigger & (~uart_tx_trigger_d))) begin
        uart_tx_pending <= 1'd1;
    end
    if (uart_rx_clear) begin
        uart_rx_pending <= 1'd0;
    end
    uart_rx_trigger_d <= uart_rx_trigger;
    if ((uart_rx_trigger & (~uart_rx_trigger_d))) begin
        uart_rx_pending <= 1'd1;
    end
    if (uart_tx_fifo_syncfifo_re) begin
        uart_tx_fifo_readable <= 1'd1;
    end else begin
        if (uart_tx_fifo_re) begin
            uart_tx_fifo_readable <= 1'd0;
        end
    end
    if (((uart_tx_fifo_syncfifo_we & uart_tx_fifo_syncfifo_writable) & (~uart_tx_fifo_replace))) begin
        uart_tx_fifo_produce <= (uart_tx_fifo_produce + 1'd1);
    end
    if (uart_tx_fifo_do_read) begin
        uart_tx_fifo_consume <= (uart_tx_fifo_consume + 1'd1);
    end
    if (((uart_tx_fifo_syncfifo_we & uart_tx_fifo_syncfifo_writable) & (~uart_tx_fifo_replace))) begin
        if ((~uart_tx_fifo_do_read)) begin
            uart_tx_fifo_level0 <= (uart_tx_fifo_level0 + 1'd1);
        end
    end else begin
        if (uart_tx_fifo_do_read) begin
            uart_tx_fifo_level0 <= (uart_tx_fifo_level0 - 1'd1);
        end
    end
    if (uart_rx_fifo_syncfifo_re) begin
        uart_rx_fifo_readable <= 1'd1;
    end else begin
        if (uart_rx_fifo_re) begin
            uart_rx_fifo_readable <= 1'd0;
        end
    end
    if (((uart_rx_fifo_syncfifo_we & uart_rx_fifo_syncfifo_writable) & (~uart_rx_fifo_replace))) begin
        uart_rx_fifo_produce <= (uart_rx_fifo_produce + 1'd1);
    end
    if (uart_rx_fifo_do_read) begin
        uart_rx_fifo_consume <= (uart_rx_fifo_consume + 1'd1);
    end
    if (((uart_rx_fifo_syncfifo_we & uart_rx_fifo_syncfifo_writable) & (~uart_rx_fifo_replace))) begin
        if ((~uart_rx_fifo_do_read)) begin
            uart_rx_fifo_level0 <= (uart_rx_fifo_level0 + 1'd1);
        end
    end else begin
        if (uart_rx_fifo_do_read) begin
            uart_rx_fifo_level0 <= (uart_rx_fifo_level0 - 1'd1);
        end
    end
    if (timer_en_storage) begin
        if ((timer_value == 1'd0)) begin
            timer_value <= timer_reload_storage;
        end else begin
            timer_value <= (timer_value - 1'd1);
        end
    end else begin
        timer_value <= timer_load_storage;
    end
    if (timer_update_value_re) begin
        timer_value_status <= timer_value;
    end
    if (timer_zero_clear) begin
        timer_zero_pending <= 1'd0;
    end
    timer_zero_trigger_d <= timer_zero_trigger;
    if ((timer_zero_trigger & (~timer_zero_trigger_d))) begin
        timer_zero_pending <= 1'd1;
    end
    if (finish_re) begin
        $finish;
    end
    isZero_status <= out;
    isNaR_status <= out;
    simsoc_state <= simsoc_next_state;
    csr_bankarray_interface0_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank0_sel) begin
        case (csr_bankarray_interface0_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_reset0_w;
            end
            1'd1: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_scratch0_w;
            end
            2'd2: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_bus_errors_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank0_reset0_re) begin
        reset_storage[1:0] <= csr_bankarray_csrbank0_reset0_r;
    end
    reset_re <= csr_bankarray_csrbank0_reset0_re;
    if (csr_bankarray_csrbank0_scratch0_re) begin
        scratch_storage[31:0] <= csr_bankarray_csrbank0_scratch0_r;
    end
    scratch_re <= csr_bankarray_csrbank0_scratch0_re;
    bus_errors_re <= csr_bankarray_csrbank0_bus_errors_re;
    csr_bankarray_sel_r <= csr_bankarray_sel;
    csr_bankarray_interface1_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank1_sel) begin
        case (csr_bankarray_interface1_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_n10_w;
            end
            1'd1: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_n20_w;
            end
            2'd2: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_sub0_w;
            end
            2'd3: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_isZero_w;
            end
            3'd4: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_isNaR_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank1_n10_re) begin
        n1_storage[31:0] <= csr_bankarray_csrbank1_n10_r;
    end
    n1_re <= csr_bankarray_csrbank1_n10_re;
    if (csr_bankarray_csrbank1_n20_re) begin
        n2_storage[31:0] <= csr_bankarray_csrbank1_n20_r;
    end
    n2_re <= csr_bankarray_csrbank1_n20_re;
    if (csr_bankarray_csrbank1_sub0_re) begin
        sub_storage[31:0] <= csr_bankarray_csrbank1_sub0_r;
    end
    sub_re <= csr_bankarray_csrbank1_sub0_re;
    isZero_re <= csr_bankarray_csrbank1_isZero_re;
    isNaR_re <= csr_bankarray_csrbank1_isNaR_re;
    csr_bankarray_interface2_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank2_sel) begin
        case (csr_bankarray_interface2_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface2_bank_bus_dat_r <= finish_w;
            end
        endcase
    end
    csr_bankarray_interface3_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank3_sel) begin
        case (csr_bankarray_interface3_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_marker0_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank3_marker0_re) begin
        sim_marker_storage[7:0] <= csr_bankarray_csrbank3_marker0_r;
    end
    sim_marker_re <= csr_bankarray_csrbank3_marker0_re;
    csr_bankarray_interface4_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank4_sel) begin
        case (csr_bankarray_interface4_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_enable0_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank4_enable0_re) begin
        sim_trace_storage <= csr_bankarray_csrbank4_enable0_r;
    end
    sim_trace_re <= csr_bankarray_csrbank4_enable0_re;
    csr_bankarray_interface5_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank5_sel) begin
        case (csr_bankarray_interface5_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface5_bank_bus_dat_r <= csr_bankarray_csrbank5_load0_w;
            end
            1'd1: begin
                csr_bankarray_interface5_bank_bus_dat_r <= csr_bankarray_csrbank5_reload0_w;
            end
            2'd2: begin
                csr_bankarray_interface5_bank_bus_dat_r <= csr_bankarray_csrbank5_en0_w;
            end
            2'd3: begin
                csr_bankarray_interface5_bank_bus_dat_r <= csr_bankarray_csrbank5_update_value0_w;
            end
            3'd4: begin
                csr_bankarray_interface5_bank_bus_dat_r <= csr_bankarray_csrbank5_value_w;
            end
            3'd5: begin
                csr_bankarray_interface5_bank_bus_dat_r <= csr_bankarray_csrbank5_ev_status_w;
            end
            3'd6: begin
                csr_bankarray_interface5_bank_bus_dat_r <= csr_bankarray_csrbank5_ev_pending_w;
            end
            3'd7: begin
                csr_bankarray_interface5_bank_bus_dat_r <= csr_bankarray_csrbank5_ev_enable0_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank5_load0_re) begin
        timer_load_storage[31:0] <= csr_bankarray_csrbank5_load0_r;
    end
    timer_load_re <= csr_bankarray_csrbank5_load0_re;
    if (csr_bankarray_csrbank5_reload0_re) begin
        timer_reload_storage[31:0] <= csr_bankarray_csrbank5_reload0_r;
    end
    timer_reload_re <= csr_bankarray_csrbank5_reload0_re;
    if (csr_bankarray_csrbank5_en0_re) begin
        timer_en_storage <= csr_bankarray_csrbank5_en0_r;
    end
    timer_en_re <= csr_bankarray_csrbank5_en0_re;
    if (csr_bankarray_csrbank5_update_value0_re) begin
        timer_update_value_storage <= csr_bankarray_csrbank5_update_value0_r;
    end
    timer_update_value_re <= csr_bankarray_csrbank5_update_value0_re;
    timer_value_re <= csr_bankarray_csrbank5_value_re;
    timer_status_re <= csr_bankarray_csrbank5_ev_status_re;
    if (csr_bankarray_csrbank5_ev_pending_re) begin
        timer_pending_r <= csr_bankarray_csrbank5_ev_pending_r;
    end
    timer_pending_re <= csr_bankarray_csrbank5_ev_pending_re;
    if (csr_bankarray_csrbank5_ev_enable0_re) begin
        timer_enable_storage <= csr_bankarray_csrbank5_ev_enable0_r;
    end
    timer_enable_re <= csr_bankarray_csrbank5_ev_enable0_re;
    csr_bankarray_interface6_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank6_sel) begin
        case (csr_bankarray_interface6_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface6_bank_bus_dat_r <= uart_rxtx_w;
            end
            1'd1: begin
                csr_bankarray_interface6_bank_bus_dat_r <= csr_bankarray_csrbank6_txfull_w;
            end
            2'd2: begin
                csr_bankarray_interface6_bank_bus_dat_r <= csr_bankarray_csrbank6_rxempty_w;
            end
            2'd3: begin
                csr_bankarray_interface6_bank_bus_dat_r <= csr_bankarray_csrbank6_ev_status_w;
            end
            3'd4: begin
                csr_bankarray_interface6_bank_bus_dat_r <= csr_bankarray_csrbank6_ev_pending_w;
            end
            3'd5: begin
                csr_bankarray_interface6_bank_bus_dat_r <= csr_bankarray_csrbank6_ev_enable0_w;
            end
            3'd6: begin
                csr_bankarray_interface6_bank_bus_dat_r <= csr_bankarray_csrbank6_txempty_w;
            end
            3'd7: begin
                csr_bankarray_interface6_bank_bus_dat_r <= csr_bankarray_csrbank6_rxfull_w;
            end
        endcase
    end
    uart_txfull_re <= csr_bankarray_csrbank6_txfull_re;
    uart_rxempty_re <= csr_bankarray_csrbank6_rxempty_re;
    uart_status_re <= csr_bankarray_csrbank6_ev_status_re;
    if (csr_bankarray_csrbank6_ev_pending_re) begin
        uart_pending_r[1:0] <= csr_bankarray_csrbank6_ev_pending_r;
    end
    uart_pending_re <= csr_bankarray_csrbank6_ev_pending_re;
    if (csr_bankarray_csrbank6_ev_enable0_re) begin
        uart_enable_storage[1:0] <= csr_bankarray_csrbank6_ev_enable0_r;
    end
    uart_enable_re <= csr_bankarray_csrbank6_ev_enable0_re;
    uart_txempty_re <= csr_bankarray_csrbank6_txempty_re;
    uart_rxfull_re <= csr_bankarray_csrbank6_rxfull_re;
    if (sys_rst) begin
        reset_storage <= 2'd0;
        reset_re <= 1'd0;
        scratch_storage <= 32'd305419896;
        scratch_re <= 1'd0;
        bus_errors_re <= 1'd0;
        bus_errors <= 32'd0;
        vexriscv_debug_reset <= 1'd0;
        vexriscv_ibus_err <= 1'd0;
        vexriscv_dbus_err <= 1'd0;
        vexriscv_i_cmd_valid <= 1'd0;
        vexriscv_i_cmd_payload_wr <= 1'd0;
        vexriscv_i_cmd_payload_address <= 8'd0;
        vexriscv_i_cmd_payload_data <= 32'd0;
        vexriscv_reset_debug_logic <= 1'd0;
        vexriscv_transfer_complete <= 1'd0;
        vexriscv_transfer_in_progress <= 1'd0;
        vexriscv_transfer_wait_for_ack <= 1'd0;
        vexriscv_debug_bus_ack <= 1'd0;
        ram_bus_ack <= 1'd0;
        interface0_ram_bus_ack <= 1'd0;
        interface1_ram_bus_ack <= 1'd0;
        uart_txfull_re <= 1'd0;
        uart_rxempty_re <= 1'd0;
        uart_tx_pending <= 1'd0;
        uart_tx_trigger_d <= 1'd0;
        uart_rx_pending <= 1'd0;
        uart_rx_trigger_d <= 1'd0;
        uart_status_re <= 1'd0;
        uart_pending_re <= 1'd0;
        uart_pending_r <= 2'd0;
        uart_enable_storage <= 2'd0;
        uart_enable_re <= 1'd0;
        uart_txempty_re <= 1'd0;
        uart_rxfull_re <= 1'd0;
        uart_tx_fifo_readable <= 1'd0;
        uart_tx_fifo_level0 <= 5'd0;
        uart_tx_fifo_produce <= 4'd0;
        uart_tx_fifo_consume <= 4'd0;
        uart_rx_fifo_readable <= 1'd0;
        uart_rx_fifo_level0 <= 5'd0;
        uart_rx_fifo_produce <= 4'd0;
        uart_rx_fifo_consume <= 4'd0;
        timer_load_storage <= 32'd0;
        timer_load_re <= 1'd0;
        timer_reload_storage <= 32'd0;
        timer_reload_re <= 1'd0;
        timer_en_storage <= 1'd0;
        timer_en_re <= 1'd0;
        timer_update_value_storage <= 1'd0;
        timer_update_value_re <= 1'd0;
        timer_value_status <= 32'd0;
        timer_value_re <= 1'd0;
        timer_zero_pending <= 1'd0;
        timer_zero_trigger_d <= 1'd0;
        timer_status_re <= 1'd0;
        timer_pending_re <= 1'd0;
        timer_pending_r <= 1'd0;
        timer_enable_storage <= 1'd0;
        timer_enable_re <= 1'd0;
        timer_value <= 32'd0;
        sim_trace_storage <= 1'd0;
        sim_trace_re <= 1'd0;
        sim_marker_storage <= 8'd0;
        sim_marker_re <= 1'd0;
        n1_storage <= 32'd0;
        n1_re <= 1'd0;
        n2_storage <= 32'd0;
        n2_re <= 1'd0;
        sub_storage <= 32'd0;
        sub_re <= 1'd0;
        isZero_status <= 1'd0;
        isZero_re <= 1'd0;
        isNaR_status <= 1'd0;
        isNaR_re <= 1'd0;
        grant <= 1'd0;
        slaves <= 5'd0;
        count <= 20'd1000000;
        csr_bankarray_sel_r <= 1'd0;
        simsoc_state <= 1'd0;
    end
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory rom: 6094-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [31:0] rom[0:6093];
initial begin
	$readmemh("sim_rom.init", rom);
end
reg [31:0] rom_dat0;
always @(posedge sys_clk_1) begin
	rom_dat0 <= rom[adr];
end
assign dat_r = rom_dat0;


//------------------------------------------------------------------------------
// Memory sram: 2048-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] sram[0:2047];
initial begin
	$readmemh("sim_sram.init", sram);
end
reg [10:0] sram_adr0;
always @(posedge sys_clk_1) begin
	if (sram0_we[0])
		sram[sram0_adr][7:0] <= sram0_dat_w[7:0];
	if (sram0_we[1])
		sram[sram0_adr][15:8] <= sram0_dat_w[15:8];
	if (sram0_we[2])
		sram[sram0_adr][23:16] <= sram0_dat_w[23:16];
	if (sram0_we[3])
		sram[sram0_adr][31:24] <= sram0_dat_w[31:24];
	sram_adr0 <= sram0_adr;
end
assign sram0_dat_r = sram[sram_adr0];


//------------------------------------------------------------------------------
// Memory main_ram: 16384-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] main_ram[0:16383];
initial begin
	$readmemh("sim_main_ram.init", main_ram);
end
reg [13:0] main_ram_adr0;
always @(posedge sys_clk_1) begin
	if (sram1_we[0])
		main_ram[sram1_adr][7:0] <= sram1_dat_w[7:0];
	if (sram1_we[1])
		main_ram[sram1_adr][15:8] <= sram1_dat_w[15:8];
	if (sram1_we[2])
		main_ram[sram1_adr][23:16] <= sram1_dat_w[23:16];
	if (sram1_we[3])
		main_ram[sram1_adr][31:24] <= sram1_dat_w[31:24];
	main_ram_adr0 <= sram1_adr;
end
assign sram1_dat_r = main_ram[main_ram_adr0];


//------------------------------------------------------------------------------
// Memory mem: 37-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [7:0] mem[0:36];
initial begin
	$readmemh("sim_mem.init", mem);
end
reg [5:0] mem_adr0;
always @(posedge sys_clk_1) begin
	mem_adr0 <= csr_bankarray_adr;
end
assign csr_bankarray_dat_r = mem[mem_adr0];


//------------------------------------------------------------------------------
// Memory storage: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage[0:15];
reg [9:0] storage_dat0;
reg [9:0] storage_dat1;
always @(posedge sys_clk_1) begin
	if (uart_tx_fifo_wrport_we)
		storage[uart_tx_fifo_wrport_adr] <= uart_tx_fifo_wrport_dat_w;
	storage_dat0 <= storage[uart_tx_fifo_wrport_adr];
end
always @(posedge sys_clk_1) begin
	if (uart_tx_fifo_rdport_re)
		storage_dat1 <= storage[uart_tx_fifo_rdport_adr];
end
assign uart_tx_fifo_wrport_dat_r = storage_dat0;
assign uart_tx_fifo_rdport_dat_r = storage_dat1;


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk_1) begin
	if (uart_rx_fifo_wrport_we)
		storage_1[uart_rx_fifo_wrport_adr] <= uart_rx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[uart_rx_fifo_wrport_adr];
end
always @(posedge sys_clk_1) begin
	if (uart_rx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[uart_rx_fifo_rdport_adr];
end
assign uart_rx_fifo_wrport_dat_r = storage_1_dat0;
assign uart_rx_fifo_rdport_dat_r = storage_1_dat1;


PositAdd PositAdd(
	.clock(sys_clk_1),
	.io_num1(n1_storage),
	.io_num2(n2_storage),
	.io_sub(sub_storage),
	.reset(sys_rst),
	.io_isNaR(isNaR_status),
	.io_isZero(isZero_status),
	.io_out(out)
);

VexRiscv VexRiscv(
	.clk(sys_clk_1),
	.dBusWishbone_ACK(dbus_dbus_ack),
	.dBusWishbone_DAT_MISO(dbus_dbus_dat_r),
	.dBusWishbone_ERR((dbus_dbus_err | vexriscv_dbus_err)),
	.debugReset(sys_rst),
	.debug_bus_cmd_payload_address(vexriscv_i_cmd_payload_address),
	.debug_bus_cmd_payload_data(vexriscv_i_cmd_payload_data),
	.debug_bus_cmd_payload_wr(vexriscv_i_cmd_payload_wr),
	.debug_bus_cmd_valid(vexriscv_i_cmd_valid),
	.externalInterruptArray(interrupt),
	.externalResetVector(vexriscv),
	.iBusWishbone_ACK(ibus_ibus_ack),
	.iBusWishbone_DAT_MISO(ibus_ibus_dat_r),
	.iBusWishbone_ERR((ibus_ibus_err | vexriscv_ibus_err)),
	.reset(((sys_rst | reset) | vexriscv_debug_reset)),
	.softwareInterrupt(1'd0),
	.timerInterrupt(1'd0),
	.dBusWishbone_ADR(dbus_dbus_adr),
	.dBusWishbone_BTE(dbus_dbus_bte),
	.dBusWishbone_CTI(dbus_dbus_cti),
	.dBusWishbone_CYC(dbus_dbus_cyc),
	.dBusWishbone_DAT_MOSI(dbus_dbus_dat_w),
	.dBusWishbone_SEL(dbus_dbus_sel),
	.dBusWishbone_STB(dbus_dbus_stb),
	.dBusWishbone_WE(dbus_dbus_we),
	.debug_bus_cmd_ready(vexriscv_o_cmd_ready),
	.debug_bus_rsp_data(vexriscv_o_rsp_data),
	.debug_resetOut(vexriscv_o_resetOut),
	.iBusWishbone_ADR(ibus_ibus_adr),
	.iBusWishbone_BTE(ibus_ibus_bte),
	.iBusWishbone_CTI(ibus_ibus_cti),
	.iBusWishbone_CYC(ibus_ibus_cyc),
	.iBusWishbone_DAT_MOSI(ibus_ibus_dat_w),
	.iBusWishbone_SEL(ibus_ibus_sel),
	.iBusWishbone_STB(ibus_ibus_stb),
	.iBusWishbone_WE(ibus_ibus_we)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2023-11-07 08:35:17.
//------------------------------------------------------------------------------
